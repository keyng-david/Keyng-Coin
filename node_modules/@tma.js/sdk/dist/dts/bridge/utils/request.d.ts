import { ExecuteWithOptions, If, IsNever } from '../../types/index.js';
import { MiniAppsEventName, MiniAppsEventPayload } from '../events/types.js';
import { MiniAppsMethodName, MiniAppsMethodParams } from '../methods/types/index.js';

/**
 * `request` method `capture` option.
 * @see request
 */
export type RequestCapture<T extends MiniAppsEventName | MiniAppsEventName[]> = T extends (infer U extends MiniAppsEventName)[] ? If<IsNever<MiniAppsEventPayload<U>>, () => boolean, (payload: {
    [K in U]: If<IsNever<MiniAppsEventPayload<K>>, {
        event: K;
    }, {
        event: K;
        payload: MiniAppsEventPayload<K>;
    }>;
}[U]) => boolean> : T extends MiniAppsEventName ? If<IsNever<MiniAppsEventPayload<T>>, () => boolean, (payload: MiniAppsEventPayload<T>) => boolean> : never;
/**
 * `request` method options.
 * @see request
 */
export type RequestOptions<Method extends MiniAppsMethodName, Event extends MiniAppsEventName | MiniAppsEventName[]> = {
    /**
     * Mini Apps method name.
     */
    method: Method;
    /**
     * Tracked Mini Apps events.
     */
    event: Event;
    /**
     * Should return true in case, this event should be captured. If not specified,
     * request will be captured automatically.
     */
    capture?: RequestCapture<Event>;
} & ExecuteWithOptions & If<IsNever<MiniAppsMethodParams<Method>>, {}, {
    /**
     * List of method parameters.
     */
    params: MiniAppsMethodParams<Method>;
}>;
export type RequestResult<Event extends MiniAppsEventName | MiniAppsEventName[]> = Event extends (infer T extends MiniAppsEventName)[] ? MiniAppsEventPayload<T> : Event extends MiniAppsEventName ? MiniAppsEventPayload<Event> : never;
/**
 * Calls specified Mini Apps method and captures one of the specified events. Returns promise
 * which will be resolved in case, specified event was captured.
 * @param options - method options.
 */
export declare function request<Method extends MiniAppsMethodName, Event extends MiniAppsEventName | MiniAppsEventName[]>(options: RequestOptions<Method, Event>): Promise<RequestResult<Event>>;
