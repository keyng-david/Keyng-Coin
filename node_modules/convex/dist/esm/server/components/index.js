"use strict";
import {
  convexToJson
} from "../../values/index.js";
function install(definition, options = {}) {
  const importedComponentDefinition = definition;
  if (typeof importedComponentDefinition.componentDefinitionPath !== "string") {
    throw new Error(
      "Component definition does not have the required componentDefinitionPath property. This code only works in Convex runtime."
    );
  }
  this._childComponents.push([
    options.name || importedComponentDefinition.componentDefinitionPath.split("/").pop(),
    importedComponentDefinition,
    options.args || {}
  ]);
  return {};
}
function exportAppForAnalysis() {
  const definitionType = { type: "app" };
  const childComponents = serializeChildComponents(this._childComponents);
  return {
    definitionType,
    childComponents,
    exports: { type: "branch", branch: [] }
  };
}
function serializeChildComponents(childComponents) {
  return childComponents.map(([name, definition, p]) => {
    const args = [];
    for (const [name2, value] of Object.entries(p)) {
      args.push([
        name2,
        { type: "value", value: JSON.stringify(convexToJson(value)) }
      ]);
    }
    const path = definition.componentDefinitionPath;
    if (!path)
      throw new Error(
        "no .componentPath for component definition " + JSON.stringify(definition, null, 2)
      );
    return {
      name,
      path,
      args
    };
  });
}
function exportComponentForAnalysis() {
  const args = Object.entries(
    this._args
  ).map(([name, validator]) => [
    name,
    {
      type: "value",
      value: JSON.stringify(validator.json)
    }
  ]);
  const definitionType = {
    type: "childComponent",
    name: this._name,
    args
  };
  const childComponents = serializeChildComponents(this._childComponents);
  return {
    name: this._name,
    definitionType,
    childComponents,
    exports: { type: "branch", branch: [] }
  };
}
export function defineComponent(name, options = {}) {
  const ret = {
    _isRoot: false,
    _name: name,
    _args: options.args || {},
    _childComponents: [],
    export: exportComponentForAnalysis,
    install,
    // pretend to conform to ComponentDefinition, which temporarily expects __args
    ...{}
  };
  return ret;
}
export function defineApp() {
  const ret = {
    _isRoot: true,
    _childComponents: [],
    export: exportAppForAnalysis,
    install
  };
  return ret;
}
const toReferencePath = Symbol.for("toReferencePath");
export function extractReferencePath(reference) {
  return reference[toReferencePath] ?? null;
}
function createChildComponents(root, pathParts) {
  const handler = {
    get(_, prop) {
      if (typeof prop === "string") {
        const newParts = [...pathParts, prop];
        return createChildComponents(root, newParts);
      } else if (prop === toReferencePath) {
        if (pathParts.length < 1) {
          const found = [root, ...pathParts].join(".");
          throw new Error(
            `API path is expected to be of the form \`${root}.childComponent.functionName\`. Found: \`${found}\``
          );
        }
        return `_reference/childComponent/` + pathParts.join("/");
      } else {
        return void 0;
      }
    }
  };
  return new Proxy({}, handler);
}
export const appGeneric = () => createChildComponents("app", []);
export const componentGeneric = () => createChildComponents("component", []);
//# sourceMappingURL=index.js.map
