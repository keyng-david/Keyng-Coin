{"version":3,"file":"use-scramble.esm.js","sources":["../src/index.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\nfunction getRandomInt(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction getRandomChar(range: RangeOrCharCodes) {\n  let rand = 0;\n  if (range.length === 2) {\n    rand = getRandomInt(range[0], range[1]);\n  } else {\n    rand = range[getRandomInt(0, range.length - 1)];\n  }\n\n  return String.fromCharCode(rand);\n}\n\ntype RangeOrCharCodes = {\n  0: number;\n  1: number;\n} & Array<number>;\n\nexport type UseScrambleProps = {\n  /**\n   * When playOnMount is true, the animation will not play the first time a text input is provided.\n   */\n  playOnMount?: boolean;\n  /**\n   * Optional text input\n   */\n  text?: string;\n  /**\n   * 0-1 range that determines the scramble speed. A speed of 1 will redraw 60 times a second. A speed of 0 will pause the animation\n   *\n   * @default 1\n   */\n  speed?: number;\n  /**\n   * The controller will move forward along the text input and scramble more characters, at a pace of `tick` frames. Combined with the `speed` prop, you can control the animation rate\n   *\n   * @default 1\n   */\n  tick?: number;\n  /**\n   * Step forward on every tick\n   *\n   * @default 1\n   */\n  step?: number;\n\n  /**\n   * Chance of scrambling a character, range from 0 to 1, 0 being no chance, and 1 being 100% chance\n   */\n  chance?: number;\n  /**\n   * Randomize `seed` characters at random text positions\n   *\n   * @default 1\n   */\n  seed?: number;\n  /**\n   * How many times to scramble each character?\n   *\n   * @default 1\n   */\n  scramble?: number;\n  /**\n   * Characters to avoid scrambling\n   */\n  ignore?: string[];\n\n  /**\n   * Unicode character range for scrambler.\n   *\n   * If a tupple is provided [60,125], it will randomly choose a unicode character code within that range.\n   *\n   * If the array contains more than two unicode values, it will choose randomly from the array values only.\n   *\n   * To randomize with only two values, you can repeat them in the array [91,93,91,93]\n   *\n   * @default [65,125]\n   */\n  range?: RangeOrCharCodes;\n  /**\n   * Set the animation to overdrive mode, and set the unicode character code to use in the animation\n   */\n  overdrive?: boolean | number;\n  /**\n   * Always start text animation from an empty string\n   *\n   * @default false\n   */\n  overflow?: boolean;\n\n  /**\n   * Callback when animation starts drawing\n   */\n  onAnimationStart?: Function;\n\n  /**\n   * Callback for when the animation finished\n   */\n  onAnimationEnd?: Function;\n\n  /**\n   * onRedraw callback\n   */\n  onAnimationFrame?: (result: string) => void;\n};\n\nexport const useScramble = (props: UseScrambleProps) => {\n  let {\n    playOnMount = true,\n    text = '',\n    speed = 1,\n    seed = 1,\n    step = 1,\n    tick = 1,\n    scramble = 1,\n    chance = 1,\n    overflow = true,\n    range = [65, 125],\n    overdrive = true,\n    onAnimationStart,\n    onAnimationFrame,\n    onAnimationEnd,\n    ignore = [' '],\n  } = props;\n\n  const prefersReducedMotion =\n    typeof window !== \"undefined\"\n      ? window.matchMedia(\"(prefers-reduced-motion: reduce)\").matches\n      : false;\n\n  if (prefersReducedMotion) {\n    step = text.length;\n    chance = 0;\n    overdrive = false;\n  }\n\n  // text node ref\n  const nodeRef = useRef<any>(null);\n\n  // animation frame request\n  const rafRef = useRef<number>(0);\n\n  // compute\n  const elapsedRef = useRef(0);\n  const fpsInterval = 1000 / (60 * speed);\n\n  // scramble step\n  const stepRef = useRef<number>(0);\n\n  // current character index ref\n  const scrambleIndexRef = useRef<number>(0);\n\n  // scramble controller\n  const controlRef = useRef<Array<string | number | null>>([]);\n\n  // overdrive control index\n  const overdriveRef = useRef<number>(0);\n\n  const setIfNotIgnored = (\n    value: string | number | null | number,\n    replace: string | number | null\n  ) => (ignore.includes(`${value}`) ? value : replace);\n\n  // pick random character ahead in the string, and add them to the randomizer\n  const seedForward = () => {\n    if (scrambleIndexRef.current === text.length) return;\n\n    for (var i = 0; i < seed; i++) {\n      const index = getRandomInt(\n        scrambleIndexRef.current,\n        controlRef.current.length\n      );\n      if (\n        typeof controlRef.current[index] !== 'number' &&\n        typeof controlRef.current[index] !== 'undefined'\n      ) {\n        controlRef.current[index] = setIfNotIgnored(\n          controlRef.current[index],\n          getRandomInt(0, 10) >= (1 - chance) * 10 ? scramble || seed : 0\n        );\n      }\n    }\n  };\n\n  // add `step` characters to the randomizer, and increase the scrambleIndexRef pointer\n  const stepForward = () => {\n    for (var i = 0; i < step; i++) {\n      if (scrambleIndexRef.current < text.length) {\n        const currentIndex = scrambleIndexRef.current;\n\n        const shouldScramble = getRandomInt(0, 10) >= (1 - chance) * 10;\n\n        controlRef.current[currentIndex] = setIfNotIgnored(\n          text[scrambleIndexRef.current],\n          shouldScramble\n            ? scramble + getRandomInt(0, Math.ceil(scramble / 2))\n            : 0\n        );\n        scrambleIndexRef.current++;\n      }\n    }\n  };\n\n  const resizeControl = () => {\n    if (text.length < controlRef.current.length) {\n      controlRef.current.pop();\n      controlRef.current.splice(text.length, step);\n    }\n    for (var i = 0; i < step; i++) {\n      if (controlRef.current.length < text.length) {\n        controlRef.current.push(\n          setIfNotIgnored(text[controlRef.current.length + 1], null)\n        );\n      }\n    }\n  };\n\n  const onOverdrive = () => {\n    if (!overdrive) return;\n\n    for (var i = 0; i < step; i++) {\n      const max = Math.max(controlRef.current.length, text.length);\n      if (overdriveRef.current < max) {\n        controlRef.current[overdriveRef.current] = setIfNotIgnored(\n          text[overdriveRef.current],\n          String.fromCharCode(typeof overdrive === 'boolean' ? 95 : overdrive)\n        );\n        overdriveRef.current++;\n      }\n    }\n  };\n\n  const onTick = () => {\n    stepForward();\n    resizeControl();\n    seedForward();\n  };\n\n  /**\n   * Control the animation framerate, from the speed prop\n   *\n   * if speed is 0, stop the animation\n   */\n  const animate = (time: number) => {\n    if (!speed) return;\n\n    rafRef.current = requestAnimationFrame(animate);\n\n    onOverdrive();\n\n    const timeElapsed = time - elapsedRef.current;\n    if (timeElapsed > fpsInterval) {\n      elapsedRef.current = time;\n\n      if (stepRef.current % tick === 0) {\n        onTick();\n      }\n\n      draw();\n    }\n  };\n\n  /**\n   * Redraw text on every animation frame\n   */\n  const draw = () => {\n    if (!nodeRef.current) return;\n\n    let result = '';\n\n    for (var i = 0; i < controlRef.current.length; i++) {\n      const controlValue = controlRef.current[i];\n\n      switch (true) {\n        /**\n         * a positive integer value, get a random character\n         */\n        case typeof controlValue === 'number' && controlValue > 0:\n          result += getRandomChar(range);\n\n          if (i <= scrambleIndexRef.current) {\n            // reduce scramble index only if it's past the scrambleIndexRef\n            controlRef.current[i] = (controlRef.current[i] as number) - 1;\n          }\n          break;\n\n        /**\n         * a string from the previous text\n         */\n        case typeof controlValue === 'string' &&\n          (i >= text.length || i >= scrambleIndexRef.current):\n          result += controlValue;\n          break;\n\n        /**\n         * before scramble index, and equal to the string\n         */\n        case controlValue === text[i] && i < scrambleIndexRef.current:\n          result += text[i];\n          break;\n\n        /**\n         * scramble has finished\n         */\n        case controlValue === 0 && i < text.length:\n          result += text[i];\n          controlRef.current[i] = text[i];\n          break;\n\n        default:\n          result += '';\n      }\n    }\n\n    // set text\n    nodeRef.current.innerHTML = result;\n\n    onAnimationFrame && onAnimationFrame(result);\n\n    /**\n     * Exit if the result is equal to the input\n     *\n     * - Trim control to text length\n     * - fire onAnimationEnd\n     */\n    if (result === text) {\n      controlRef.current.splice(text.length, controlRef.current.length);\n      onAnimationEnd && onAnimationEnd();\n\n      cancelAnimationFrame(rafRef.current);\n    }\n\n    stepRef.current++;\n  };\n\n  /**\n   * Reset scramble controls\n   *\n   * if overflow is true, overflow the control to the an empty array, the size of the text input. This will cause the animation to play from an empty string\n   */\n  const reset = () => {\n    stepRef.current = 0;\n    scrambleIndexRef.current = 0;\n    overdriveRef.current = 0;\n    if (!overflow) {\n      controlRef.current = new Array(text?.length);\n    }\n  };\n\n  /**\n   * Restarts the animation\n   *\n   * Cancels the current animation frame, resets the scramble index and other controls, and requests a new animation\n   */\n  const play = () => {\n    cancelAnimationFrame(rafRef.current);\n    reset();\n    onAnimationStart && onAnimationStart();\n    rafRef.current = requestAnimationFrame(animate);\n  };\n\n  /**\n   * reset scramble when text input is changed\n   */\n  useEffect(() => {\n    reset();\n  }, [text]);\n\n  /**\n   * start or stop animation when text and speed change\n   */\n  useEffect(() => {\n    cancelAnimationFrame(rafRef.current);\n\n    rafRef.current = requestAnimationFrame(animate);\n\n    // cancel raf on unmount\n    return () => {\n      cancelAnimationFrame(rafRef.current);\n    };\n  }, [animate]);\n\n  useEffect(() => {\n    if (!playOnMount) {\n      controlRef.current = text.split('');\n      stepRef.current = text.length;\n      scrambleIndexRef.current = text.length;\n      overdriveRef.current = text.length;\n      draw();\n      cancelAnimationFrame(rafRef.current);\n    }\n  }, []);\n\n  return { ref: nodeRef, replay: play };\n};\n"],"names":["getRandomInt","min","max","Math","floor","random","getRandomChar","range","rand","length","String","fromCharCode","useScramble","props","playOnMount","text","speed","seed","step","tick","scramble","chance","overflow","overdrive","onAnimationStart","onAnimationFrame","onAnimationEnd","ignore","prefersReducedMotion","window","matchMedia","matches","nodeRef","useRef","rafRef","elapsedRef","fpsInterval","stepRef","scrambleIndexRef","controlRef","overdriveRef","setIfNotIgnored","value","replace","includes","seedForward","current","i","index","stepForward","currentIndex","shouldScramble","ceil","resizeControl","pop","splice","push","onOverdrive","onTick","animate","time","requestAnimationFrame","timeElapsed","draw","result","controlValue","innerHTML","cancelAnimationFrame","reset","Array","play","useEffect","split","ref","replay"],"mappings":"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"}