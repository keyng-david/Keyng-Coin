"use strict";
import path from "path";
import { changeSpinner, logError } from "../../bundler/context.js";
import { configFromProjectConfig, readProjectConfig } from "./config.js";
import { finishPush, startPush, waitForSchema } from "./deploy2.js";
import { version } from "../version.js";
import { ensureHasConvexDependency, functionsDir } from "./utils.js";
import {
  bundleDefinitions,
  bundleImplementations,
  componentGraph
} from "./components/definition/bundle.js";
import { isComponentDirectory } from "./components/definition/directoryStructure.js";
import {
  doFinalComponentCodegen,
  doInitialComponentCodegen
} from "./codegen.js";
import { typeCheckFunctionsInMode } from "./typecheck.js";
import { withTmpDir } from "../../bundler/fs.js";
export async function runComponentsPush(ctx, options) {
  const { configPath, projectConfig } = await readProjectConfig(ctx);
  const verbose = options.verbose || options.dryRun;
  await ensureHasConvexDependency(ctx, "push");
  if (!options.codegen) {
    logError(ctx, "disabling codegen not allowed");
    await ctx.crash(1, "fatal");
  }
  if (options.dryRun) {
    logError(ctx, "dryRun not allowed yet");
    await ctx.crash(1, "fatal");
  }
  if (options.debugBundlePath) {
    logError(ctx, "debugBundlePath not allowed yet");
    await ctx.crash(1, "fatal");
  }
  if (!options.enableComponents) {
    logError(ctx, "enableComponents must be true");
    await ctx.crash(1, "fatal");
  }
  const convexDir = functionsDir(configPath, projectConfig);
  const absWorkingDir = path.resolve(".");
  const isComponent = isComponentDirectory(ctx, convexDir, true);
  if (isComponent.kind === "err") {
    logError(
      ctx,
      `Invalid component root directory (${isComponent.why}): ${convexDir}`
    );
    return await ctx.crash(1, "invalid filesystem data");
  }
  const rootComponent = isComponent.component;
  changeSpinner(ctx, "Traversing component definitions...");
  const { components, dependencyGraph } = await componentGraph(
    ctx,
    absWorkingDir,
    rootComponent,
    verbose
  );
  changeSpinner(ctx, "Generating server code...");
  await withTmpDir(async (tmpDir) => {
    await doInitialComponentCodegen(ctx, tmpDir, rootComponent, options);
    for (const directory of components.values()) {
      await doInitialComponentCodegen(ctx, tmpDir, directory, options);
    }
  });
  changeSpinner(ctx, "Bundling component definitions...");
  const {
    appDefinitionSpecWithoutImpls,
    componentDefinitionSpecsWithoutImpls
  } = await bundleDefinitions(
    ctx,
    absWorkingDir,
    dependencyGraph,
    rootComponent,
    // Note that this *includes* the root component.
    [...components.values()]
  );
  const { config: localConfig } = await configFromProjectConfig(
    ctx,
    projectConfig,
    configPath,
    verbose
  );
  changeSpinner(ctx, "Bundling component schemas and implementations...");
  const { appImplementation, componentImplementations } = await bundleImplementations(
    ctx,
    rootComponent,
    [...components.values()],
    verbose
  );
  const appDefinition = {
    ...appDefinitionSpecWithoutImpls,
    auth: localConfig.authConfig || null,
    ...appImplementation
  };
  const componentDefinitions = [];
  for (const componentDefinition of componentDefinitionSpecsWithoutImpls) {
    const impl = componentImplementations.filter(
      (impl2) => (
        // convert from ComponentPath
        path.resolve(rootComponent.path, impl2.definitionPath) === componentDefinition.definitionPath
      )
    )[0];
    if (!impl) {
      console.log(
        `missing! couldn't find ${componentDefinition.definitionPath} in ${componentImplementations.map((impl2) => path.resolve(rootComponent.path, impl2.definitionPath)).toString()}`
      );
      return await ctx.crash(1, "fatal");
    }
    componentDefinitions.push({
      ...componentDefinition,
      ...impl
    });
  }
  const udfServerVersion = version;
  const startPushResponse = await startPush(
    ctx,
    options.url,
    {
      adminKey: options.adminKey,
      dryRun: false,
      functions: projectConfig.functions,
      udfServerVersion,
      appDefinition,
      componentDefinitions,
      nodeDependencies: []
    },
    verbose
  );
  verbose && console.log("startPush:", startPushResponse);
  changeSpinner(ctx, "Finalizing code generation...");
  await withTmpDir(async (tmpDir) => {
    await doFinalComponentCodegen(
      ctx,
      tmpDir,
      rootComponent,
      rootComponent,
      startPushResponse
    );
    for (const directory of components.values()) {
      await doFinalComponentCodegen(
        ctx,
        tmpDir,
        rootComponent,
        directory,
        startPushResponse
      );
    }
  });
  changeSpinner(ctx, "Running TypeScript...");
  await typeCheckFunctionsInMode(ctx, options.typecheck, rootComponent.path);
  for (const directory of components.values()) {
    await typeCheckFunctionsInMode(ctx, options.typecheck, directory.path);
  }
  changeSpinner(ctx, "Waiting for schema...");
  await waitForSchema(ctx, options.adminKey, options.url, startPushResponse);
  const finishPushResponse = await finishPush(
    ctx,
    options.adminKey,
    options.url,
    startPushResponse
  );
  verbose && console.log("finishPush:", finishPushResponse);
}
//# sourceMappingURL=components.js.map
